<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="H$:`Kb`h*bUMCnHVM^}x" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="c99{5RG5Ea*Bdm:3^/e9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PingUnit {" line1="    //% block=&quot;微秒&quot;" line2="    MicroSeconds," line3="    //% block=&quot;厘米&quot;" line4="    Centimeters," line5="    //% block=&quot;英寸&quot;" line6="    Inches" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="2atb~1gI?K*_aH%BDakW" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PINs {" line1="    P0," line2="    P1," line3="    P2," line4="    P3," line5="    P4," line6="    P5," line7="    P6," line8="    P7," line9="    P8," line10="    P9," line11="    P10," line12="    P11," line13="    P12," line14="    P13," line15="    P14," line16="    P15," line17="    P16," line18="    P19," line19="    P20" line20="}" numlines="21"></mutation><next><block type="typescript_statement" id="sggjOwfi44KYT2`/!)Xu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TMP36Type {" line1="    //% block=&quot;(℃)&quot; enumval=0" line2="    TMP36_temperature_C," line3="" line4="    //% block=&quot;(℉)&quot; enumval=1" line5="    TMP36_temperature_F," line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="m=5[%?LNW1q5N00OS_5g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RGB {" line1="    //% block=&quot;红&quot;" line2="    RED," line3="    //% block=&quot;绿&quot;" line4="    GREEN," line5="    //% block=&quot;蓝&quot;" line6="    BLUE," line7="    //% block=&quot;全部&quot;" line8="    CLEAR" line9="}" numlines="10"></mutation><next><block type="typescript_statement" id="/!7uSwz07T^7s2..ZT[!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=红" line2="    Red = 0xFF0000," line3="    //% block=橙" line4="    Orange = 0xFFA500," line5="    //% block=黄" line6="    Yellow = 0xFFFF00," line7="    //% block=绿" line8="    Green = 0x00FF00," line9="    //% block=蓝" line10="    Blue = 0x0000FF," line11="    //% block=靛蓝" line12="    Indigo = 0x4b0082," line13="    //% block=紫罗兰" line14="    Violet = 0x8a2be2," line15="    //% block=紫" line16="    Purple = 0xFF00FF," line17="    //% block=白" line18="    White = 0xFFFFFF," line19="    //% block=黑" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="E4_+fX(=SPK33S2h|]T6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB 格式)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB 格式)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="us7x63]n!6:?zOg=hr[R" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Microbit {" line1="" line2="    export enum DHT11_state {" line3="        //% block=&quot;温度(℃)&quot; enumval=0" line4="        DHT11_temperature_C," line5="" line6="        //% block=&quot;湿度(0~100)&quot; enumval=1" line7="        DHT11_humidity," line8="    }" line9="" line10="    export enum Distance_Unit_List {" line11="        //% block=&quot;厘米&quot; " line12="        Distance_Unit_cm," line13="" line14="        //% block=&quot;英寸&quot;" line15="        Distance_Unit_inch," line16="    }" line17="" line18="" line19="" line20="" line21="" line22="" line23="    // Functions for reading Particle from the gatorParticle in Particle or straight adv value" line24="&#9;" line25="&#9;/**" line26="&#9;* Initializes the gator:particle sensor, must be called on power up" line27="&#9;*/&#9;" line28="&#9;//% weight=30 " line29="&#9;//% blockId=&quot;gatorParticle_begin&quot; " line30="&#9;//% block=&quot;initialize gator:Particle sensor&quot;" line31="&#9;//% shim=Microbit::begin" line32="&#9;export function begin(){" line33="&#9;&#9;return" line34="&#9;}" line35="&#9;&#9;" line36="&#9;/**" line37="&#9;* Reads either the Red or Infrared detection channels" line38="&#9;*/" line39="&#9;//% weight=29 " line40="&#9;//% blockId=&quot;gatorParticle_color&quot; " line41="&#9;//% block=&quot;get %LEDToRead value&quot;" line42="&#9;//% shim=Microbit::color" line43="&#9;export function color(type: LEDToRead): number{" line44="&#9;&#9;return 0" line45="&#9;}" line46="&#9;" line47="&#9;/**" line48="&#9;* Set which LED's we want the sensor to update and read." line49="&#9;*/&#9;" line50="&#9;//% weight=28" line51="&#9;//% blockId=&quot;gatorParticle_setReadMode&quot;" line52="&#9;//% block=&quot;set LED mode to read %LEDMode&quot;" line53="&#9;//% shim=Microbit::setReadMode" line54="&#9;//% advanced=true" line55="&#9;export function setReadMode(mode: LEDMode)" line56="&#9;{" line57="&#9;&#9;return" line58="&#9;}" line59="" line60="&#9;/**" line61="&#9;* Set the amplitude of either Red or Infrared LED" line62="&#9;*/&#9;" line63="&#9;//% weight=27" line64="&#9;//% blockId=&quot;gatorParticle_setAmplitude&quot;" line65="&#9;//% block=&quot;change strength of %LEDToRead | to %myBrightness&quot;" line66="&#9;//% shim=Microbit::setAmplitude" line67="&#9;//% advanced=true" line68="&#9;export function setAmplitude(led: LEDToRead, myBrightness: number)" line69="&#9;{" line70="&#9;&#9;return" line71="&#9;}" line72="&#9;" line73="&#9;/**" line74="&#9;* Grab the heartbeat from the sensor in either beats per minute, or an average of the last 4 BPM readings." line75="&#9;*/" line76="&#9;//% weight=26" line77="&#9;//% blockId=&quot;gatorParticle_heartbeat&quot;" line78="&#9;//% block=&quot;detect heartbeat in %HeartbeatType&quot;" line79="&#9;//% shim=Microbit::heartbeat" line80="&#9;export function heartbeat(type: HeartbeatType): number" line81="&#9;{" line82="&#9;&#9;return 0" line83="&#9;}" line84="" line85="" line86="" line87="" line88="" line89="" line90="" line91="    //% blockId=&quot;readsoilmoisture&quot; block=&quot;土壤湿度传感器 %soilhumiditypin&quot;" line92="    //% subcategory=传感器" line93="    export function ReadSoilHumidity(soilmoisturepin: AnalogPin): number {" line94="        let voltage = 0;" line95="        let soilmoisture = 0;" line96="        voltage = pins.map(" line97="            pins.analogReadPin(soilmoisturepin)," line98="            0," line99="            1023," line100="            0," line101="            1023" line102="        );" line103="        soilmoisture = voltage;" line104="        return Math.round(soilmoisture);" line105="    }" line106="    //% blockId=&quot;readlightintensity&quot; block=&quot;光敏传感器 %lightintensitypin&quot;" line107="    //% subcategory=传感器" line108="    export function ReadLightIntensity(lightintensitypin: AnalogPin): number {" line109="        let voltage2 = 0;" line110="        let lightintensity = 0;" line111="        voltage2 = pins.map(" line112="            pins.analogReadPin(lightintensitypin)," line113="            0," line114="            1023," line115="            0," line116="            1023" line117="        );" line118="        lightintensity = voltage2;" line119="        return Math.round(1023 - lightintensity);" line120="    }" line121="    /**" line122="    * toggle fans" line123="    */" line124="    //% blockId=fans block=&quot;电机风扇 %pin 切换至 $fanstate || 速度 %speed&quot;" line125="    //% fanstate.shadow=&quot;toggleOnOff&quot;" line126="    //% speed.min=0 speed.max=1023" line127="    //% expandableArgumentMode=&quot;toggle&quot;" line128="    //% subcategory=执行器" line129="    export function motorFan(pin: AnalogPin, fanstate: boolean, speed: number = 1023): void {" line130="        if (fanstate) {" line131="            pins.analogSetPeriod(pin, 1023)" line132="            pins.analogWritePin(pin, Math.map(speed, 0, 1023, 0, 1023))" line133="        }" line134="        else {" line135="            pins.analogWritePin(pin, 0)" line136="            speed = 0" line137="        }" line138="    }" line139="" line140="    /**" line141="    * get Ultrasonic distance" line142="    */" line143="    //% blockId=sonarbit" line144="    //% distance_unit.fieldEditor=&quot;gridpicker&quot;" line145="    //% distance_unit.fieldOptions.columns=2" line146="    //% subcategory=传感器" line147="    //% blockId=sonar_ping block=&quot;超声波传感器 echo %echo trig %trig 单位 %unit&quot;" line148="    export function ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {" line149="        // send pulse" line150="        pins.setPull(trig, PinPullMode.PullNone);" line151="        pins.digitalWritePin(trig, 0);" line152="        control.waitMicros(2);" line153="        pins.digitalWritePin(trig, 1);" line154="        control.waitMicros(10);" line155="        pins.digitalWritePin(trig, 0);" line156="" line157="        // read pulse" line158="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);" line159="" line160="        switch (unit) {" line161="            case PingUnit.Centimeters: return Math.idiv(d, 58);" line162="            case PingUnit.Inches: return Math.idiv(d, 148);" line163="            default: return d;" line164="        }" line165="    }" line166="" line167="    /**" line168="    * toggle led" line169="    */" line170="    //% blockId=LEDR block=&quot;红色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line171="    //% brightness.min=0 brightness.max=1023" line172="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line173="    //% expandableArgumentMode=&quot;toggle&quot;" line174="    //% subcategory=执行器" line175="    export function ledRBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line176="        if (ledstate) {" line177="            pins.analogSetPeriod(pin, 1023)" line178="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line179="        }" line180="        else {" line181="            pins.analogWritePin(pin, 1023)" line182="            brightness = 1023" line183="        }" line184="    }" line185="" line186="    /**" line187="    * toggle led" line188="    */" line189="    //% blockId=LEDG block=&quot;绿色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line190="    //% brightness.min=0 brightness.max=1023" line191="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line192="    //% expandableArgumentMode=&quot;toggle&quot;" line193="    //% subcategory=执行器" line194="    export function ledGBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line195="        if (ledstate) {" line196="            pins.analogSetPeriod(pin, 1023)" line197="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line198="        }" line199="        else {" line200="            pins.analogWritePin(pin, 1023)" line201="            brightness = 1023" line202="        }" line203="    }" line204="" line205="    /**" line206="    * toggle led" line207="    */" line208="    //% blockId=LEDB block=&quot;蓝色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line209="    //% brightness.min=0 brightness.max=1023" line210="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line211="    //% expandableArgumentMode=&quot;toggle&quot;" line212="    //% subcategory=执行器" line213="    export function ledBBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line214="        if (ledstate) {" line215="            pins.analogSetPeriod(pin, 1023)" line216="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line217="        }" line218="        else {" line219="            pins.analogWritePin(pin, 1023)" line220="            brightness = 1023" line221="        }" line222="    }" line223="" line224="    /**" line225="    * toggle led" line226="    */" line227="    //% blockId=LEDY block=&quot;黄色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line228="    //% brightness.min=0 brightness.max=1023" line229="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line230="    //% expandableArgumentMode=&quot;toggle&quot;" line231="    //% subcategory=执行器" line232="    export function ledYBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line233="        if (ledstate) {" line234="            pins.analogSetPeriod(pin, 1023)" line235="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line236="        }" line237="        else {" line238="            pins.analogWritePin(pin, 1023)" line239="            brightness = 1023" line240="        }" line241="    }" line242="" line243="    const PCA9685_ADD = 0x40" line244="    const MODE1 = 0x00" line245="    const LED0_ON_L = 0x06" line246="    const PRESCALE = 0xFE" line247="" line248="    let initialized = false" line249="" line250="    export enum enPos {" line251="        //% blockId=&quot;forward&quot; block=&quot;前进&quot;" line252="        forward = 1," line253="        //% blockId=&quot;stop&quot; block=&quot;后退&quot;" line254="        stop = 2" line255="    }" line256="" line257="    export enum enServo {" line258="        S1 = 0," line259="        S2," line260="        S3," line261="        S4" line262="    }" line263="" line264="    export enum enMotors {" line265="        M1 = 8," line266="        M2 = 10," line267="        M3 = 12," line268="        M4 = 14" line269="    }" line270="" line271="    function i2cwrite(addr: number, reg: number, value: number) {" line272="        let buf = pins.createBuffer(2)" line273="        buf[0] = reg" line274="        buf[1] = value" line275="        pins.i2cWriteBuffer(addr, buf)" line276="    }" line277="" line278="    function i2cread(addr: number, reg: number) {" line279="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line280="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line281="        return val;" line282="    }" line283="" line284="    function initPCA9685(): void {" line285="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line286="        setFreq(50);" line287="    }" line288="" line289="    function setFreq(freq: number): void {" line290="        // Constrain the frequency" line291="        let prescaleval = 25000000;" line292="        prescaleval /= 4096;" line293="        prescaleval /= freq;" line294="        prescaleval -= 1;" line295="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line296="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line297="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line298="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line299="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line300="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line301="        control.waitMicros(5000);" line302="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line303="    }" line304="" line305="    function setPwm(channel: number, on: number, off: number): void {" line306="        if (channel &lt; 0 || channel &gt; 15)" line307="            return;" line308="        if (!initialized) {" line309="            initPCA9685();" line310="        }" line311="        let buf2 = pins.createBuffer(5);" line312="        buf2[0] = LED0_ON_L + 4 * channel;" line313="        buf2[1] = on &amp; 0xff;" line314="        buf2[2] = (on &gt;&gt; 8) &amp; 0xff;" line315="        buf2[3] = off &amp; 0xff;" line316="        buf2[4] = (off &gt;&gt; 8) &amp; 0xff;" line317="        pins.i2cWriteBuffer(PCA9685_ADD, buf2);" line318="    }" line319="" line320="    //% blockId=SuperBit_Servo4 block=&quot;Geek舵机| %num|角度 %value&quot;" line321="    //% num.min=1 num.max=4 value.min=0 value.max=300" line322="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line323="    //% subcategory=执行器" line324="    export function Servo4(num: enServo, value: number): void {" line325="" line326="        // 50hz: 20,000 us" line327="        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4" line328="        let pwm = us * 4096 / 20000;" line329="        setPwm(num, 0, pwm);" line330="" line331="    }" line332="" line333="    //% blockId=SuperBit_MotorRun block=&quot;电机|%index|速度(-255~255) %speed&quot;" line334="    //% speed.min=-255 speed.max=255" line335="    //% subcategory=执行器" line336="    export function MotorRun(index: enMotors, speed: number): void {" line337="        if (!initialized) {" line338="            initPCA9685()" line339="        }" line340="        speed = speed * 16; // map 255 to 4096" line341="        if (speed &gt;= 4096) {" line342="            speed = 4095" line343="        }" line344="        if (speed &lt;= -4096) {" line345="            speed = -4095" line346="        }" line347="" line348="        let a = index" line349="        let b = index + 1" line350="" line351="        if (a &gt; 10) {" line352="            if (speed &gt;= 0) {" line353="                setPwm(a, 0, speed)" line354="                setPwm(b, 0, 0)" line355="            } else {" line356="                setPwm(a, 0, 0)" line357="                setPwm(b, 0, -speed)" line358="            }" line359="        }" line360="        else {" line361="            if (speed &gt;= 0) {" line362="                setPwm(b, 0, speed)" line363="                setPwm(a, 0, 0)" line364="            } else {" line365="                setPwm(b, 0, 0)" line366="                setPwm(a, 0, -speed)" line367="            }" line368="        }" line369="    }" line370="" line371="    //% blockId=&quot;elecmagnet&quot; block=&quot;电磁铁 %pin 切换至 %magState || 磁力 %force&quot;" line372="    //% magState.shadow=&quot;toggleOnOff&quot;" line373="    //% force.min=0 force.max=1023" line374="    //% expandableArgumentMode=&quot;toggle&quot;" line375="    //% subcategory=执行器" line376="    export function elecmagnet(pin: AnalogPin, magState: boolean, force: number = 1023): void {" line377="" line378="        if (magState) {" line379="            pins.analogSetPeriod(pin, 1023)" line380="            pins.analogWritePin(pin, Math.map(force, 0, 1023, 0, 1023))" line381="        }" line382="        else {" line383="            pins.analogWritePin(pin, 0)" line384="            force = 0" line385="        }" line386="    }" line387="    //% blockId=&quot;pinpullup&quot; block=&quot;巡线传感器 %pin 引脚为上拉&quot;" line388="    //% subcategory=执行器" line389="    export function pinpullup(pin: PINs): void {" line390="        switch (pin) {" line391="            case PINs.P0: pins.setPull(DigitalPin.P0, PinPullMode.PullUp);" line392="            case PINs.P1: pins.setPull(DigitalPin.P1, PinPullMode.PullUp);" line393="            case PINs.P2: pins.setPull(DigitalPin.P2, PinPullMode.PullUp);" line394="            case PINs.P3: pins.setPull(DigitalPin.P3, PinPullMode.PullUp);" line395="            case PINs.P4: pins.setPull(DigitalPin.P4, PinPullMode.PullUp);" line396="            case PINs.P5: pins.setPull(DigitalPin.P5, PinPullMode.PullUp);" line397="            case PINs.P6: pins.setPull(DigitalPin.P6, PinPullMode.PullUp);" line398="            case PINs.P7: pins.setPull(DigitalPin.P7, PinPullMode.PullUp);" line399="            case PINs.P8: pins.setPull(DigitalPin.P8, PinPullMode.PullUp);" line400="            case PINs.P9: pins.setPull(DigitalPin.P9, PinPullMode.PullUp);" line401="            case PINs.P10: pins.setPull(DigitalPin.P10, PinPullMode.PullUp);" line402="            case PINs.P11: pins.setPull(DigitalPin.P11, PinPullMode.PullUp);" line403="            case PINs.P12: pins.setPull(DigitalPin.P12, PinPullMode.PullUp);" line404="            case PINs.P13: pins.setPull(DigitalPin.P13, PinPullMode.PullUp);" line405="            case PINs.P14: pins.setPull(DigitalPin.P14, PinPullMode.PullUp);" line406="            case PINs.P15: pins.setPull(DigitalPin.P15, PinPullMode.PullUp);" line407="            case PINs.P16: pins.setPull(DigitalPin.P16, PinPullMode.PullUp);" line408="            case PINs.P19: pins.setPull(DigitalPin.P19, PinPullMode.PullUp);" line409="            case PINs.P20: pins.setPull(DigitalPin.P20, PinPullMode.PullUp);" line410="        }" line411="" line412="" line413="    }" line414="" line415="    //% blockId=&quot;laser_controller&quot; block=&quot;激光 %pin 切换至 %laserState || 激光 %intensity&quot;" line416="    //% laserState.shadow=&quot;toggleOnOff&quot;" line417="    //% intensity.min=0 intensity.max=1023" line418="    //% expandableArgumentMode=&quot;toggle&quot;" line419="    //% subcategory=执行器" line420="    export function laserController(pin: AnalogPin, laserState: boolean, intensity: number = 1023): void {" line421="" line422="        if (laserState) {" line423="            pins.analogSetPeriod(pin, 1023)" line424="            pins.analogWritePin(pin, Math.map(intensity, 0, 1023, 0, 1023))" line425="        }" line426="        else {" line427="            pins.analogWritePin(pin, 0)" line428="            intensity = 0" line429="        }" line430="    }" line431="" line432="    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;水位传感器 %waterlevelpin&quot;" line433="    //% subcategory=传感器" line434="    export function ReadWaterLevel(waterlevelpin: AnalogPin): number {" line435="        let voltage4 = 0;" line436="        let waterLevel = 0;" line437="        voltage4 = pins.map(" line438="            pins.analogReadPin(waterlevelpin)," line439="            0," line440="            1023," line441="            0," line442="            1023" line443="        );" line444="        waterLevel = voltage4;" line445="        return Math.round(waterLevel);" line446="    }" line447="" line448="    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;可燃气体传感器 %gasconcentrationpin&quot;" line449="    //% subcategory=传感器" line450="    export function ReadGasConcentration(gasconcentrationpin: AnalogPin): number {" line451="        let voltage5 = 0;" line452="        let gasConcentration = 0;" line453="        voltage5 = pins.map(" line454="            pins.analogReadPin(gasconcentrationpin)," line455="            0," line456="            1023," line457="            0," line458="            1023" line459="        );" line460="        gasConcentration = voltage5;" line461="        return Math.round(gasConcentration);" line462="    }" line463="" line464="    //% blockId=&quot;Readflame&quot; block=&quot;火焰传感器 %flamepin&quot;" line465="    //% subcategory=传感器" line466="    export function Readflame(flamepin: AnalogPin): number {" line467="        let voltage6 = 0;" line468="        let flame = 0;" line469="        voltage6 = pins.map(" line470="            pins.analogReadPin(flamepin)," line471="            0," line472="            1023," line473="            0," line474="            1023" line475="        );" line476="        flame = voltage6;" line477="        return Math.round(flame);" line478="    }" line479="" line480="    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;灰度传感器 %graylevelpin&quot;" line481="    //% subcategory=传感器" line482="    export function ReadGrayLevel(graylevelpin: AnalogPin): number {" line483="        let voltage7 = 0;" line484="        let grayLevel = 0;" line485="        voltage7 = pins.map(" line486="            pins.analogReadPin(graylevelpin)," line487="            0," line488="            1023," line489="            80," line490="            1023" line491="        );" line492="        grayLevel = voltage7;" line493="        return Math.round(grayLevel);" line494="    }" line495="" line496="    //% blockId=&quot;readWaterTemp&quot; block=&quot;防水温度传感器 %waterproofpin&quot;" line497="    //% subcategory=传感器" line498="    export function readWaterTemp(waterproofpin: AnalogPin): number {" line499="        let voltage22 = 0;" line500="        let waterProofTemp = 0;" line501="        voltage22 = pins.analogReadPin(waterproofpin);//%获得原始值" line502="        if (voltage22 &gt; 1001) { waterProofTemp = 100; }" line503="        else if (voltage22 &gt; 1000) { waterProofTemp = 98; }" line504="        else if (voltage22 &gt; 999) { waterProofTemp = 97; }" line505="        else if (voltage22 &gt; 998) { waterProofTemp = 96; }" line506="        else if (voltage22 &gt; 997) { waterProofTemp = 95; }" line507="        else if (voltage22 &gt; 996) { waterProofTemp = 93; }" line508="        else if (voltage22 &gt; 995) { waterProofTemp = 92; }" line509="        else if (voltage22 &gt; 994) { waterProofTemp = 91; }" line510="        else if (voltage22 &gt; 993) { waterProofTemp = 90; }" line511="        else if (voltage22 &gt; 992) { waterProofTemp = 89; }" line512="        else if (voltage22 &gt; 991) { waterProofTemp = 88; }" line513="        else if (voltage22 &gt; 990) { waterProofTemp = 87; }" line514="        else if (voltage22 &gt; 989) { waterProofTemp = 86; }" line515="        else if (voltage22 &gt; 988) { waterProofTemp = 85; }" line516="        else if (voltage22 &gt; 987) { waterProofTemp = 84; }" line517="        else if (voltage22 &gt; 986) { waterProofTemp = 83; }" line518="        else if (voltage22 &gt; 985) { waterProofTemp = 82; }" line519="        else if (voltage22 &gt; 984) { waterProofTemp = 81; }" line520="        else if (voltage22 &gt; 982) { waterProofTemp = 80; }" line521="        else if (voltage22 &gt; 981) { waterProofTemp = 79; }" line522="        else if (voltage22 &gt; 980) { waterProofTemp = 78; }" line523="        else if (voltage22 &gt; 978) { waterProofTemp = 77; }" line524="        else if (voltage22 &gt; 977) { waterProofTemp = 76; }" line525="        else if (voltage22 &gt; 975) { waterProofTemp = 75; }" line526="        else if (voltage22 &gt; 974) { waterProofTemp = 74; }" line527="        else if (voltage22 &gt; 972) { waterProofTemp = 73; }" line528="        else if (voltage22 &gt; 971) { waterProofTemp = 72; }" line529="        else if (voltage22 &gt; 969) { waterProofTemp = 71; }" line530="        else if (voltage22 &gt; 967) { waterProofTemp = 70; }" line531="        else if (voltage22 &gt; 965) { waterProofTemp = 69; }" line532="        else if (voltage22 &gt; 963) { waterProofTemp = 68; }" line533="        else if (voltage22 &gt; 961) { waterProofTemp = 67; }" line534="        else if (voltage22 &gt; 959) { waterProofTemp = 66; }" line535="        else if (voltage22 &gt; 957) { waterProofTemp = 65; }" line536="        else if (voltage22 &gt; 955) { waterProofTemp = 64; }" line537="        else if (voltage22 &gt; 953) { waterProofTemp = 63; }" line538="        else if (voltage22 &gt; 950) { waterProofTemp = 62; }" line539="        else if (voltage22 &gt; 948) { waterProofTemp = 61; }" line540="        else if (voltage22 &gt; 943) { waterProofTemp = 59; }" line541="        else if (voltage22 &gt; 940) { waterProofTemp = 58; }" line542="        else if (voltage22 &gt; 937) { waterProofTemp = 57; }" line543="        else if (voltage22 &gt; 934) { waterProofTemp = 56; }" line544="        else if (voltage22 &gt; 931) { waterProofTemp = 55; }" line545="        else if (voltage22 &gt; 928) { waterProofTemp = 54; }" line546="        else if (voltage22 &gt; 924) { waterProofTemp = 53; }" line547="        else if (voltage22 &gt; 921) { waterProofTemp = 52; }" line548="        else if (voltage22 &gt; 917) { waterProofTemp = 51; }" line549="        else if (voltage22 &gt; 914) { waterProofTemp = 51; }" line550="        else if (voltage22 &gt; 910) { waterProofTemp = 49; }" line551="        else if (voltage22 &gt; 906) { waterProofTemp = 48; }" line552="        else if (voltage22 &gt; 902) { waterProofTemp = 47; }" line553="        else if (voltage22 &gt; 898) { waterProofTemp = 46; }" line554="        else if (voltage22 &gt; 893) { waterProofTemp = 45; }" line555="        else if (voltage22 &gt; 889) { waterProofTemp = 44; }" line556="        else if (voltage22 &gt; 884) { waterProofTemp = 43; }" line557="        else if (voltage22 &gt; 879) { waterProofTemp = 42; }" line558="        else if (voltage22 &gt; 874) { waterProofTemp = 41; }" line559="        else if (voltage22 &gt; 869) { waterProofTemp = 40; }" line560="        else if (voltage22 &gt; 864) { waterProofTemp = 39; }" line561="        else if (voltage22 &gt; 858) { waterProofTemp = 38; }" line562="        else if (voltage22 &gt; 852) { waterProofTemp = 37; }" line563="        else if (voltage22 &gt; 846) { waterProofTemp = 36; }" line564="        else if (voltage22 &gt; 840) { waterProofTemp = 35; }" line565="        else if (voltage22 &gt; 834) { waterProofTemp = 34; }" line566="        else if (voltage22 &gt; 827) { waterProofTemp = 33; }" line567="        else if (voltage22 &gt; 821) { waterProofTemp = 32; }" line568="        else if (voltage22 &gt; 814) { waterProofTemp = 31; }" line569="        else if (voltage22 &gt; 806) { waterProofTemp = 30; }" line570="        else if (voltage22 &gt; 799) { waterProofTemp = 29; }" line571="        else if (voltage22 &gt; 791) { waterProofTemp = 28; }" line572="        else if (voltage22 &gt; 784) { waterProofTemp = 27; }" line573="        else if (voltage22 &gt; 776) { waterProofTemp = 26; }" line574="        else if (voltage22 &gt; 767) { waterProofTemp = 25; }" line575="        else if (voltage22 &gt; 759) { waterProofTemp = 24; }" line576="        else if (voltage22 &gt; 750) { waterProofTemp = 23; }" line577="        else if (voltage22 &gt; 741) { waterProofTemp = 22; }" line578="        else if (voltage22 &gt; 732) { waterProofTemp = 21; }" line579="        else if (voltage22 &gt; 713) { waterProofTemp = 19; }" line580="        else if (voltage22 &gt; 703) { waterProofTemp = 18; }" line581="        else if (voltage22 &gt; 692) { waterProofTemp = 17; }" line582="        else if (voltage22 &gt; 682) { waterProofTemp = 16; }" line583="        else if (voltage22 &gt; 671) { waterProofTemp = 15; }" line584="        else if (voltage22 &gt; 661) { waterProofTemp = 14; }" line585="        else if (voltage22 &gt; 650) { waterProofTemp = 13; }" line586="        else if (voltage22 &gt; 638) { waterProofTemp = 12; }" line587="        else if (voltage22 &gt; 627) { waterProofTemp = 11; }" line588="        else if (voltage22 &gt; 615) { waterProofTemp = 10; }" line589="        else if (voltage22 &gt; 604) { waterProofTemp = 9; }" line590="        else if (voltage22 &gt; 592) { waterProofTemp = 8; }" line591="        else if (voltage22 &gt; 579) { waterProofTemp = 7; }" line592="        else if (voltage22 &gt; 567) { waterProofTemp = 6; }" line593="        else if (voltage22 &gt; 555) { waterProofTemp = 5; }" line594="        else if (voltage22 &gt; 542) { waterProofTemp = 4; }" line595="        else if (voltage22 &gt; 530) { waterProofTemp = 3; }" line596="        else if (voltage22 &gt; 517) { waterProofTemp = 2; }" line597="        else if (voltage22 &gt; 504) { waterProofTemp = 1; }" line598="        else { waterProofTemp = 0; }" line599="        return waterProofTemp;" line600="    }" line601="" line602="    //% blockId=potentiometerRead" line603="    //% block=&quot;电位器 %pin&quot;" line604="    //% subcategory=传感器" line605="    export function potentiometerRead(pin: AnalogPin): number {" line606="        return pins.analogReadPin(pin);" line607="    }" line608="" line609="    //% blockId=buttonState" line610="    //% block=&quot;按钮传感器 %pin&quot;" line611="    //% subcategory=传感器" line612="    export function buttonState(pin: DigitalPin): number {" line613="" line614="        return pins.digitalReadPin(pin);" line615="    }" line616="    //% blockId=followState" line617="    //% block=&quot;巡线传感器 %pin&quot;" line618="    //% subcategory=传感器" line619="    export function followState(pin: PINs): number {" line620="        switch (pin) {" line621="            case PINs.P0: return pins.digitalReadPin(DigitalPin.P0);" line622="            case PINs.P1: return pins.digitalReadPin(DigitalPin.P1);" line623="            case PINs.P2: return pins.digitalReadPin(DigitalPin.P2);" line624="            case PINs.P3: return pins.digitalReadPin(DigitalPin.P3);" line625="            case PINs.P4: return pins.digitalReadPin(DigitalPin.P4);" line626="            case PINs.P5: return pins.digitalReadPin(DigitalPin.P5);" line627="            case PINs.P6: return pins.digitalReadPin(DigitalPin.P6);" line628="            case PINs.P7: return pins.digitalReadPin(DigitalPin.P7);" line629="            case PINs.P8: return pins.digitalReadPin(DigitalPin.P8);" line630="            case PINs.P9: return pins.digitalReadPin(DigitalPin.P9);" line631="            case PINs.P10: return pins.digitalReadPin(DigitalPin.P10);" line632="            case PINs.P11: return pins.digitalReadPin(DigitalPin.P11);" line633="            case PINs.P12: return pins.digitalReadPin(DigitalPin.P12);" line634="            case PINs.P13: return pins.digitalReadPin(DigitalPin.P13);" line635="            case PINs.P14: return pins.digitalReadPin(DigitalPin.P14);" line636="            case PINs.P15: return pins.digitalReadPin(DigitalPin.P15);" line637="            case PINs.P16: return pins.digitalReadPin(DigitalPin.P16);" line638="            case PINs.P19: return pins.digitalReadPin(DigitalPin.P19);" line639="            case PINs.P20: return pins.digitalReadPin(DigitalPin.P20);" line640="" line641="        }" line642="" line643="    }" line644="" line645="    //% blockId=farState" line646="    //% block=&quot;远距离光电传感器 %pin&quot;" line647="    //% subcategory=传感器" line648="    export function farState(pin: DigitalPin): number {" line649="        return pins.digitalReadPin(pin);" line650="    }" line651="" line652="    //% blockId=hState" line653="    //% block=&quot;霍尔传感器 %pin&quot;" line654="    //% subcategory=传感器" line655="    export function hState(pin: DigitalPin): number {" line656="        return pins.digitalReadPin(pin);" line657="    }" line658="" line659="    enum LCS_Constants {" line660="        // Constants" line661="        ADDRESS = 0x29," line662="        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727." line663="" line664="        COMMAND_BIT = 0x80," line665="" line666="        ENABLE = 0x00," line667="        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable" line668="        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer" line669="        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it" line670="        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it" line671="        ATIME = 0x01, // Integration time" line672="        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)" line673="        AILTL = 0x04, // Clear channel lower interrupt threshold" line674="        AILTH = 0x05," line675="        AIHTL = 0x06, // Clear channel upper interrupt threshold" line676="        AIHTH = 0x07," line677="        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts" line678="        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt" line679="        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt" line680="        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt" line681="        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt" line682="        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt" line683="        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt" line684="        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt" line685="        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt" line686="        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt" line687="        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt" line688="        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt" line689="        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt" line690="        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt" line691="        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt" line692="        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt" line693="        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt" line694="        CONFIG = 0x0D," line695="        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME" line696="        CONTROL = 0x0F, // Set the gain level for the sensor" line697="        STATUS = 0x13," line698="        STATUS_AINT = 0x10, // RGBC Clean channel interrupt" line699="        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle" line700="" line701="        CDATAL = 0x14, // Clear channel data" line702="        CDATAH = 0x15," line703="        RDATAL = 0x16, // Red channel data" line704="        RDATAH = 0x17," line705="        GDATAL = 0x18, // Green channel data" line706="        GDATAH = 0x19," line707="        BDATAL = 0x1A, // Blue channel data" line708="        BDATAH = 0x1B," line709="" line710="        GAIN_1X = 0x00, //  1x gain" line711="        GAIN_4X = 0x01, //  4x gain" line712="        GAIN_16X = 0x02, // 16x gain" line713="        GAIN_60X = 0x03  // 60x gain" line714="    }" line715="" line716="    let LCS_integration_time_val = 0" line717="" line718="    // I2C functions" line719="" line720="    function I2C_WriteReg8(addr: number, reg: number, val: number) {" line721="        let buf3 = pins.createBuffer(2)" line722="        buf3.setNumber(NumberFormat.UInt8BE, 0, reg)" line723="        buf3.setNumber(NumberFormat.UInt8BE, 1, val)" line724="        pins.i2cWriteBuffer(addr, buf3)" line725="    }" line726="" line727="    function I2C_ReadReg8(addr: number, reg: number): number {" line728="        let buf4 = pins.createBuffer(1)" line729="        buf4.setNumber(NumberFormat.UInt8BE, 0, reg)" line730="        pins.i2cWriteBuffer(addr, buf4)" line731="        buf4 = pins.i2cReadBuffer(addr, 1)" line732="        return buf4.getNumber(NumberFormat.UInt8BE, 0);" line733="    }" line734="" line735="    function I2C_ReadReg16(addr: number, reg: number): number {" line736="        let buf5 = pins.createBuffer(1)" line737="        buf5.setNumber(NumberFormat.UInt8BE, 0, reg)" line738="        pins.i2cWriteBuffer(addr, buf5)" line739="        buf5 = pins.i2cReadBuffer(addr, 2)" line740="        // Little endian" line741="        return ((buf5.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf5.getNumber(NumberFormat.UInt8BE, 0));" line742="    }" line743="    function LCS_get_raw_data(delay: boolean = false): number[] {" line744="        if (delay) {" line745="            // Delay for the integration time to allow reading immediately after the previous read." line746="            basic.pause((256 - LCS_integration_time_val) * 2.4)" line747="        }" line748="" line749="        let div = (256 - LCS_integration_time_val) * 1024" line750="        let rgbc = [0, 0, 0, 0]" line751="        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div" line752="        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div" line753="        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div" line754="        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div" line755="        if (rgbc[0] &gt; 1) {" line756="            rgbc[0] = 1" line757="        }" line758="        if (rgbc[1] &gt; 1) {" line759="            rgbc[1] = 1" line760="        }" line761="        if (rgbc[2] &gt; 1) {" line762="            rgbc[2] = 1" line763="        }" line764="        if (rgbc[3] &gt; 1) {" line765="            rgbc[3] = 1" line766="        }" line767="        return rgbc" line768="    }" line769="" line770="    let font: number[] = [];" line771="    font[0] = 0x0022d422;" line772="    font[1] = 0x0022d422;" line773="    font[2] = 0x0022d422;" line774="    font[3] = 0x0022d422;" line775="    font[4] = 0x0022d422;" line776="    font[5] = 0x0022d422;" line777="    font[6] = 0x0022d422;" line778="    font[7] = 0x0022d422;" line779="    font[8] = 0x0022d422;" line780="    font[9] = 0x0022d422;" line781="    font[10] = 0x0022d422;" line782="    font[11] = 0x0022d422;" line783="    font[12] = 0x0022d422;" line784="    font[13] = 0x0022d422;" line785="    font[14] = 0x0022d422;" line786="    font[15] = 0x0022d422;" line787="    font[16] = 0x0022d422;" line788="    font[17] = 0x0022d422;" line789="    font[18] = 0x0022d422;" line790="    font[19] = 0x0022d422;" line791="    font[20] = 0x0022d422;" line792="    font[21] = 0x0022d422;" line793="    font[22] = 0x0022d422;" line794="    font[23] = 0x0022d422;" line795="    font[24] = 0x0022d422;" line796="    font[25] = 0x0022d422;" line797="    font[26] = 0x0022d422;" line798="    font[27] = 0x0022d422;" line799="    font[28] = 0x0022d422;" line800="    font[29] = 0x0022d422;" line801="    font[30] = 0x0022d422;" line802="    font[31] = 0x0022d422;" line803="    font[32] = 0x00000000;" line804="    font[33] = 0x000002e0;" line805="    font[34] = 0x00018060;" line806="    font[35] = 0x00afabea;" line807="    font[36] = 0x00aed6ea;" line808="    font[37] = 0x01991133;" line809="    font[38] = 0x010556aa;" line810="    font[39] = 0x00000060;" line811="    font[40] = 0x000045c0;" line812="    font[41] = 0x00003a20;" line813="    font[42] = 0x00051140;" line814="    font[43] = 0x00023880;" line815="    font[44] = 0x00002200;" line816="    font[45] = 0x00021080;" line817="    font[46] = 0x00000100;" line818="    font[47] = 0x00111110;" line819="    font[48] = 0x0007462e;" line820="    font[49] = 0x00087e40;" line821="    font[50] = 0x000956b9;" line822="    font[51] = 0x0005d629;" line823="    font[52] = 0x008fa54c;" line824="    font[53] = 0x009ad6b7;" line825="    font[54] = 0x008ada88;" line826="    font[55] = 0x00119531;" line827="    font[56] = 0x00aad6aa;" line828="    font[57] = 0x0022b6a2;" line829="    font[58] = 0x00000140;" line830="    font[59] = 0x00002a00;" line831="    font[60] = 0x0008a880;" line832="    font[61] = 0x00052940;" line833="    font[62] = 0x00022a20;" line834="    font[63] = 0x0022d422;" line835="    font[64] = 0x00e4d62e;" line836="    font[65] = 0x000f14be;" line837="    font[66] = 0x000556bf;" line838="    font[67] = 0x0008c62e;" line839="    font[68] = 0x0007463f;" line840="    font[69] = 0x0008d6bf;" line841="    font[70] = 0x000094bf;" line842="    font[71] = 0x00cac62e;" line843="    font[72] = 0x000f909f;" line844="    font[73] = 0x000047f1;" line845="    font[74] = 0x0017c629;" line846="    font[75] = 0x0008a89f;" line847="    font[76] = 0x0008421f;" line848="    font[77] = 0x01f1105f;" line849="    font[78] = 0x01f4105f;" line850="    font[79] = 0x0007462e;" line851="    font[80] = 0x000114bf;" line852="    font[81] = 0x000b6526;" line853="    font[82] = 0x010514bf;" line854="    font[83] = 0x0004d6b2;" line855="    font[84] = 0x0010fc21;" line856="    font[85] = 0x0007c20f;" line857="    font[86] = 0x00744107;" line858="    font[87] = 0x01f4111f;" line859="    font[88] = 0x000d909b;" line860="    font[89] = 0x00117041;" line861="    font[90] = 0x0008ceb9;" line862="    font[91] = 0x0008c7e0;" line863="    font[92] = 0x01041041;" line864="    font[93] = 0x000fc620;" line865="    font[94] = 0x00010440;" line866="    font[95] = 0x01084210;" line867="    font[96] = 0x00000820;" line868="    font[97] = 0x010f4a4c;" line869="    font[98] = 0x0004529f;" line870="    font[99] = 0x00094a4c;" line871="    font[100] = 0x000fd288;" line872="    font[101] = 0x000956ae;" line873="    font[102] = 0x000097c4;" line874="    font[103] = 0x0007d6a2;" line875="    font[104] = 0x000c109f;" line876="    font[105] = 0x000003a0;" line877="    font[106] = 0x0006c200;" line878="    font[107] = 0x0008289f;" line879="    font[108] = 0x000841e0;" line880="    font[109] = 0x01e1105e;" line881="    font[110] = 0x000e085e;" line882="    font[111] = 0x00064a4c;" line883="    font[112] = 0x0002295e;" line884="    font[113] = 0x000f2944;" line885="    font[114] = 0x0001085c;" line886="    font[115] = 0x00012a90;" line887="    font[116] = 0x010a51e0;" line888="    font[117] = 0x010f420e;" line889="    font[118] = 0x00644106;" line890="    font[119] = 0x01e8221e;" line891="    font[120] = 0x00093192;" line892="    font[121] = 0x00222292;" line893="    font[122] = 0x00095b52;" line894="    font[123] = 0x0008fc80;" line895="    font[124] = 0x000003e0;" line896="    font[125] = 0x000013f1;" line897="    font[126] = 0x00841080;" line898="    font[127] = 0x0022d422;" line899="" line900="    let _I2CAddr = 0;" line901="    let _screen = pins.createBuffer(1025);" line902="    let _buf2 = pins.createBuffer(2);" line903="    let _buf3 = pins.createBuffer(3);" line904="    let _buf4 = pins.createBuffer(4);" line905="    let _ZOOM = 1;" line906="" line907="    function cmd1(d: number) {" line908="        let n = d % 256;" line909="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line910="    }" line911="" line912="    function cmd2(d1: number, d2: number) {" line913="        _buf3[0] = 0;" line914="        _buf3[1] = d1;" line915="        _buf3[2] = d2;" line916="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line917="    }" line918="" line919="    function cmd3(d1: number, d2: number, d3: number) {" line920="        _buf4[0] = 0;" line921="        _buf4[1] = d1;" line922="        _buf4[2] = d2;" line923="        _buf4[3] = d3;" line924="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line925="    }" line926="" line927="    function set_pos(col: number = 0, page: number = 0) {" line928="        cmd1(0xb0 | page) // page number" line929="        let c = col * (_ZOOM + 1)" line930="        cmd1(0x00 | (c % 16)) // lower start column address" line931="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line932="    }" line933="" line934="    // clear bit" line935="    function clrbit(d: number, b: number): number {" line936="        if (d &amp; (1 &lt;&lt; b))" line937="            d -= (1 &lt;&lt; b)" line938="        return d" line939="    }" line940="" line941="    /**" line942="     * show text in OLED" line943="     * @param x is X alis, eg: 0" line944="     * @param y is Y alis, eg: 0" line945="     * @param s is the text will be show, eg: 'Hello!'" line946="     */" line947="    //% blockId=&quot;OLED12864_I2C_SHOWSTRING1&quot; block=&quot;显示 文本 在 x %x|y %y|文本 %s&quot;" line948="    //% parts=OLED12864_I2C trackArgs=0" line949="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line950="    //% weight=80 blockGap=10 color=#0855AA" line951="    export function showString(x: number, y: number, s: string, color: number = 1) {" line952="        let col2 = 0" line953="        let q = 0" line954="        let ind2 = 0" line955="        for (let r = 0; r &lt; s.length; r++) {" line956="            q = font[s.charCodeAt(r)]" line957="            for (let k = 0; k &lt; 5; k++) {" line958="                col2 = 0" line959="                for (let l = 0; l &lt; 5; l++) {" line960="                    if (q &amp; (1 &lt;&lt; (5 * k + l)))" line961="                        col2 |= (1 &lt;&lt; (l + 1))" line962="                }" line963="                ind2 = (x + r) * 5 * (_ZOOM + 1) + y * 128 + k * (_ZOOM + 1) + 1" line964="                if (color == 0)" line965="                    col2 = 255 - col2" line966="                _screen[ind2] = col2" line967="                if (_ZOOM)" line968="                    _screen[ind2 + 1] = col2" line969="            }" line970="        }" line971="        set_pos(x * 5, y)" line972="        let ind02 = x * 5 * (_ZOOM + 1) + y * 128" line973="        let buf7 = _screen.slice(ind02, ind2 + 1)" line974="        buf7[0] = 0x40" line975="        pins.i2cWriteBuffer(_I2CAddr, buf7)" line976="    }" line977="" line978="    /**" line979="     * show a number in OLED" line980="     * @param x is X alis, eg: 0" line981="     * @param y is Y alis, eg: 0" line982="     * @param num is the number will be show, eg: 12" line983="     * @param color is number color, eg: 1" line984="     */" line985="    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;显示 数字 在 x %x|y %y|数字 %num&quot;" line986="    //% parts=OLED12864_I2C trackArgs=0" line987="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line988="    //% weight=80 blockGap=10 color=#0855AA" line989="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line990="        showString(x, y, num.toString(), color)" line991="    }" line992="" line993="" line994="    export function draw() {" line995="        set_pos()" line996="        pins.i2cWriteBuffer(_I2CAddr, _screen)" line997="    }" line998="" line999="    /**" line1000="     * clear screen" line1001="     */" line1002="    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;清除&quot;" line1003="    //% parts=OLED12864_I2C trackArgs=0" line1004="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1005="    //% weight=63 blockGap=10 color=#0855AA" line1006="    export function clear() {" line1007="        _screen.fill(0)" line1008="        _screen[0] = 0x40" line1009="        draw()" line1010="    }" line1011="" line1012="    /**" line1013="     * OLED initialize" line1014="     * @param addr is i2c addr, eg: 60" line1015="     */" line1016="    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;初始化 OLED 地址为 %addr&quot;" line1017="    //% parts=OLED12864_I2C trackArgs=0" line1018="    //% weight=85 blockGap=10" line1019="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1020="    //% blockGap=10  color=#0855AA" line1021="    export function init(addr: number) {" line1022="        _I2CAddr = addr;" line1023="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line1024="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line1025="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line1026="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line1027="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line1028="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line1029="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line1030="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line1031="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line1032="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line1033="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line1034="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line1035="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line1036="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line1037="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line1038="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line1039="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line1040="        cmd2(0xD6, 1)    // zoom on" line1041="        cmd1(0xAF)       // SSD1306_DISPLAYON" line1042="        clear()" line1043="        _ZOOM = 1" line1044="    }" line1045="" line1046="    /**" line1047="     * A NeoPixel strip" line1048="     */" line1049="    export class Strip {" line1050="        buf: Buffer;" line1051="        pin: DigitalPin;" line1052="        // TODO: encode as bytes instead of 32bit" line1053="        brightness: number;" line1054="        start: number; // start offset in LED strip" line1055="        _length: number; // number of LEDs" line1056="        _mode: NeoPixelMode;" line1057="        _matrixWidth: number; // number of leds in a matrix - if any" line1058="" line1059="        /**" line1060="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line1061="         * @param rgb RGB color of the LED" line1062="         */" line1063="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|显示 颜色 %rgb=neopixel_colors&quot;" line1064="        //% strip.defl=strip" line1065="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1066="        //% color=#2699BF blockGap=10" line1067="        showColor(rgb: number) {" line1068="            rgb = rgb &gt;&gt; 0;" line1069="            this.setAllRGB(rgb);" line1070="            this.show();" line1071="        }" line1072="" line1073="        /**" line1074="         * Shows a rainbow pattern on all LEDs." line1075="         * @param startHue the start hue value for the rainbow, eg: 1" line1076="         * @param endHue the end hue value for the rainbow, eg: 360" line1077="         */" line1078="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|显示 彩虹 从 %startHue|到 %endHue&quot;" line1079="        //% strip.defl=strip" line1080="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; " line1081="        //% color=#2699BF blockGap=10" line1082="        showRainbow(startHue: number = 1, endHue: number = 360) {" line1083="            if (this._length &lt;= 0) return;" line1084="" line1085="            startHue = startHue &gt;&gt; 0;" line1086="            endHue = endHue &gt;&gt; 0;" line1087="            const saturation = 100;" line1088="            const luminance = 50;" line1089="            const steps = this._length;" line1090="            const direction = HueInterpolationDirection.Clockwise;" line1091="" line1092="            //hue" line1093="            const h1 = startHue;" line1094="            const h2 = endHue;" line1095="            const hDistCW = ((h2 + 360) - h1) % 360;" line1096="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line1097="            const hDistCCW = ((h1 + 360) - h2) % 360;" line1098="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line1099="            let hStep: number;" line1100="            if (direction === HueInterpolationDirection.Clockwise) {" line1101="                hStep = hStepCW;" line1102="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line1103="                hStep = hStepCCW;" line1104="            } else {" line1105="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line1106="            }" line1107="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line1108="" line1109="            //sat" line1110="            const s1 = saturation;" line1111="            const s2 = saturation;" line1112="            const sDist = s2 - s1;" line1113="            const sStep = Math.idiv(sDist, steps);" line1114="            const s1_100 = s1 * 100;" line1115="" line1116="            //lum" line1117="            const l1 = luminance;" line1118="            const l2 = luminance;" line1119="            const lDist = l2 - l1;" line1120="            const lStep = Math.idiv(lDist, steps);" line1121="            const l1_100 = l1 * 100" line1122="" line1123="            //interpolate" line1124="            if (steps === 1) {" line1125="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line1126="            } else {" line1127="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line1128="                for (let t = 1; t &lt; steps - 1; t++) {" line1129="                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;" line1130="                    const v = Math.idiv((s1_100 + t * sStep), 100);" line1131="                    const w = Math.idiv((l1_100 + t * lStep), 100);" line1132="                    this.setPixelColor(t, hsl(u, v, w));" line1133="                }" line1134="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line1135="            }" line1136="            this.show();" line1137="        }" line1138="" line1139="" line1140="        /**" line1141="         * Set LED to a given color (range 0-255 for r, g, b)." line1142="         * You need to call ``show`` to make the changes visible." line1143="         * @param pixeloffset position of the NeoPixel in the strip,eg: 1" line1144="         * @param rgb RGB color of the LED" line1145="         */" line1146="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|设置 像素 颜色 在 %pixeloffset|到 %rgb=neopixel_colors&quot;" line1147="        //% strip.defl=strip" line1148="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1149="        //% color=#2699BF blockGap=10" line1150="        setPixelColor(pixeloffset: number, rgb: number): void {" line1151="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line1152="        }" line1153="" line1154="        /**" line1155="         * Send all the changes to the strip." line1156="         */" line1157="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|显示&quot;" line1158="        //% strip.defl=strip" line1159="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1160="        //% color=#2699BF blockGap=10" line1161="        show() {" line1162="            // only supported in beta" line1163="            // ws2812b.setBufferMode(this.pin, this._mode);" line1164="            ws2812b.sendBuffer(this.buf, this.pin);" line1165="        }" line1166="" line1167="        /**" line1168="         * Turn off all LEDs." line1169="         * You need to call ``show`` to make the changes visible." line1170="         */" line1171="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|清除&quot;" line1172="        //% strip.defl=strip" line1173="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1174="        //% color=#2699BF blockGap=10" line1175="        clear(): void {" line1176="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1177="            this.buf.fill(0, this.start * stride, this._length * stride);" line1178="        }" line1179="" line1180="        /**" line1181="         * Set the brightness of the strip. This flag only applies to future operation." line1182="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line1183="         */" line1184="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|设置 亮度 %brightness&quot;" line1185="        //% strip.defl=strip" line1186="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1187="        //% color=#2699BF blockGap=10" line1188="        setBrightness(brightness: number): void {" line1189="            this.brightness = brightness &amp; 0xff;" line1190="        }" line1191="" line1192="        /**" line1193="         * Set the pin where the neopixel is connected, defaults to P0." line1194="         */" line1195="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1196="        //% color=#2699BF blockGap=10" line1197="        setPin(pin: DigitalPin): void {" line1198="            this.pin = pin;" line1199="            pins.digitalWritePin(this.pin, 0);" line1200="            // don't yield to avoid races on initialization" line1201="        }" line1202="" line1203="" line1204="" line1205="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line1206="            if (this._mode === NeoPixelMode.RGB_RGB) {" line1207="                this.buf[offset + 0] = red;" line1208="                this.buf[offset + 1] = green;" line1209="            } else {" line1210="                this.buf[offset + 0] = green;" line1211="                this.buf[offset + 1] = red;" line1212="            }" line1213="            this.buf[offset + 2] = blue;" line1214="        }" line1215="" line1216="        private setAllRGB(rgb: number) {" line1217="            let red = unpackR(rgb);" line1218="            let green = unpackG(rgb);" line1219="            let blue = unpackB(rgb);" line1220="" line1221="            const br3 = this.brightness;" line1222="            if (br3 &lt; 255) {" line1223="                red = (red * br3) &gt;&gt; 8;" line1224="                green = (green * br3) &gt;&gt; 8;" line1225="                blue = (blue * br3) &gt;&gt; 8;" line1226="            }" line1227="            const end3 = this.start + this._length;" line1228="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1229="            for (let i5 = this.start; i5 &lt; end3; ++i5) {" line1230="                this.setBufferRGB(i5 * stride6, red, green, blue)" line1231="            }" line1232="        }" line1233="        private setAllW(white: number) {" line1234="            if (this._mode !== NeoPixelMode.RGBW)" line1235="                return;" line1236="" line1237="            let br4 = this.brightness;" line1238="            if (br4 &lt; 255) {" line1239="                white = (white * br4) &gt;&gt; 8;" line1240="            }" line1241="            let buf8 = this.buf;" line1242="            let end4 = this.start + this._length;" line1243="            for (let i6 = this.start; i6 &lt; end4; ++i6) {" line1244="                let ledoffset3 = i6 * 4;" line1245="                buf8[ledoffset3 + 3] = white;" line1246="            }" line1247="        }" line1248="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line1249="            if (pixeloffset &lt; 0" line1250="                || pixeloffset &gt;= this._length)" line1251="                return;" line1252="" line1253="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1254="            pixeloffset = (pixeloffset + this.start) * stride7;" line1255="" line1256="            let red2 = unpackR(rgb);" line1257="            let green2 = unpackG(rgb);" line1258="            let blue2 = unpackB(rgb);" line1259="" line1260="            let br5 = this.brightness;" line1261="            if (br5 &lt; 255) {" line1262="                red2 = (red2 * br5) &gt;&gt; 8;" line1263="                green2 = (green2 * br5) &gt;&gt; 8;" line1264="                blue2 = (blue2 * br5) &gt;&gt; 8;" line1265="            }" line1266="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line1267="        }" line1268="        private setPixelW(pixeloffset: number, white: number): void {" line1269="            if (this._mode !== NeoPixelMode.RGBW)" line1270="                return;" line1271="" line1272="            if (pixeloffset &lt; 0" line1273="                || pixeloffset &gt;= this._length)" line1274="                return;" line1275="" line1276="            pixeloffset = (pixeloffset + this.start) * 4;" line1277="" line1278="            let br6 = this.brightness;" line1279="            if (br6 &lt; 255) {" line1280="                white = (white * br6) &gt;&gt; 8;" line1281="            }" line1282="            let buf9 = this.buf;" line1283="            buf9[pixeloffset + 3] = white;" line1284="        }" line1285="    }" line1286="" line1287="    /**" line1288="     * Create a new NeoPixel driver for `numleds` LEDs." line1289="     * @param pin the pin where the neopixel is connected." line1290="     * @param numleds number of leds in the strip, eg: 8,30,60,64" line1291="     */" line1292="    //% blockId=&quot;neopixel_create&quot; block=&quot;灯环 在 端口 %pin|用 %numleds| leds&quot;" line1293="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1294="    //% trackArgs=0,2" line1295="    //% blockSetVariable=strip" line1296="    //% color=#2699BF blockGap=10" line1297="    //% weight=51" line1298="    export function create(pin: DigitalPin, numleds: number): Strip {" line1299="        let strip2 = new Strip();" line1300="        let stride8 = NeoPixelMode.RGBW ? 4 : 3;" line1301="        strip2.buf = pins.createBuffer(numleds * stride8);" line1302="        strip2.start = 0;" line1303="        strip2._length = numleds;" line1304="        strip2._mode = NeoPixelMode.RGB;" line1305="        strip2._matrixWidth = 0;" line1306="        strip2.setBrightness(128)" line1307="        strip2.setPin(pin)" line1308="        return strip2;" line1309="    }" line1310="" line1311="    /**" line1312="     * Converts red, green, blue channels into a RGB color" line1313="     * @param red value of the red channel between 0 and 255. eg: 255" line1314="     * @param green value of the green channel between 0 and 255. eg: 255" line1315="     * @param blue value of the blue channel between 0 and 255. eg: 255" line1316="     */" line1317="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;红 %red|绿 %green|蓝 %blue&quot;" line1318="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1319="    //% weight=32" line1320="    //% color=#2699BF blockGap=10" line1321="    export function rgb(red: number, green: number, blue: number): number {" line1322="        return packRGB(red, green, blue);" line1323="    }" line1324="" line1325="    /**" line1326="     * Gets the RGB value of a known color" line1327="    */" line1328="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line1329="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1330="    //% weight=32" line1331="    //% color=#2699BF blockGap=10" line1332="    export function colors(color: NeoPixelColors): number {" line1333="        return color;" line1334="    }" line1335="" line1336="    function packRGB(a: number, b: number, c: number): number {" line1337="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line1338="    }" line1339="" line1340="    function unpackR(rgb: number): number {" line1341="        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;" line1342="        return r3;" line1343="    }" line1344="" line1345="    function unpackG(rgb: number): number {" line1346="        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;" line1347="        return g3;" line1348="    }" line1349="" line1350="    function unpackB(rgb: number): number {" line1351="        let b3 = (rgb) &amp; 0xFF;" line1352="        return b3;" line1353="    }" line1354="" line1355="    export function hsl(h: number, s: number, l: number): number {" line1356="        h = Math.round(h);" line1357="        s = Math.round(s);" line1358="        l = Math.round(l);" line1359="" line1360="        h = h % 360;" line1361="        s = Math.clamp(0, 99, s);" line1362="        l = Math.clamp(0, 99, l);" line1363="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line1364="        let h12 = Math.idiv(h, 60);//[0,6]" line1365="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line1366="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line1367="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line1368="        let r$: number;" line1369="        let g$: number;" line1370="        let b$: number;" line1371="        if (h12 == 0) {" line1372="            r$ = c2; g$ = x; b$ = 0;" line1373="        } else if (h12 == 1) {" line1374="            r$ = x; g$ = c2; b$ = 0;" line1375="        } else if (h12 == 2) {" line1376="            r$ = 0; g$ = c2; b$ = x;" line1377="        } else if (h12 == 3) {" line1378="            r$ = 0; g$ = x; b$ = c2;" line1379="        } else if (h12 == 4) {" line1380="            r$ = x; g$ = 0; b$ = c2;" line1381="        } else if (h12 == 5) {" line1382="            r$ = c2; g$ = 0; b$ = x;" line1383="        }" line1384="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line1385="        let r4 = r$ + m2;" line1386="        let g4 = g$ + m2;" line1387="        let b4 = b$ + m2;" line1388="        return packRGB(r4, g4, b4);" line1389="    }" line1390="" line1391="    export enum HueInterpolationDirection {" line1392="        Clockwise," line1393="        CounterClockwise," line1394="        Shortest" line1395="    }" line1396="}" numlines="1397"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>